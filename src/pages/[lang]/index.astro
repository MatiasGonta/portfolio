---
import Layout from "@layouts/Layout.astro";
import HomeSection from "@components/HomeSection.astro";
import ProjectsSection from "@components/ProjectsSection.astro";
import AboutSection from "@components/AboutSection.astro";
import ContactSection from "@components/ContactSection.astro";
import { Sections } from "@models/sections";
import HomeIcon from "@icons/section/Home.icon.astro";
import ProjectsIcon from "@icons/section/Projects.icon.astro";
import AboutIcon from "@icons/section/About.icon.astro";
import ContactIcon from "@icons/section/Contact.icon.astro";
import { getLangFromUrl, useTranslations } from '@i18n/utils';
import LenguagePicker from "@components/LenguagePicker.astro";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

export async function getStaticPaths() {
    return ['es','en'].map((lang) => {
        return { params: { lang } }
    })
}

type NavCircle = {
	name: string;
	icon: (_props: Record<string, any>) => any;
	href: Sections;
	class: string;
};

const scrollNavCircles: NavCircle[] = [
	{
		name: t('nav.home'),
		icon: HomeIcon,
		href: Sections.HOME,
		class: "top-7",
	},
	{
		name: t('nav.projects'),
		icon: ProjectsIcon,
		href: Sections.PROJECTS,
		class: "top-[90px]",
	},
	{
		name: t('nav.about'),
		icon: AboutIcon,
		href: Sections.ABOUT,
		class: "bottom-[90px]",
	},
	{
		name: t('nav.contact'),
		icon: ContactIcon,
		href: Sections.CONTACT,
		class: "bottom-7",
	},
];
---

<Layout title={t('document.title')} lang={lang}>
	<!-- ScrollNav -->
	<div id="scroll-nav" class="hidden transition-right duration-300 fixed top-1/2 -translate-y-1/2 invisible opacity-0 h-0 -right-5 xl:block">
		<div class="relative w-[125px] flex flex-col justify-center items-center">
			<div class="w-[2px] h-[275px] bg-gray-800 rounded-lg"></div>
			{
				scrollNavCircles.map((circle) => (
					<a
						href={`#${circle.href}`}
						class={`group transition-width duration-200 text-nowrap select-none absolute ${circle.class} size-[35px] rounded-full text-primary-light bg-gray-800 border border-primary-light flex justify-center items-center hover:w-auto hover:px-2.5 hover:right-11`}
						tabindex="-1"
					>
						<div>
							<circle.icon />
						</div>
						<div class="size-0 invisible opacity-0 group-hover:size-auto group-hover:visible group-hover:opacity-100 group-hover:ml-1">
							<span class="select-none">{circle.name}</span>
						</div>
					</a>
				))
			}
		</div>
	</div>

	<main class="mx-auto w-full text-white text-[16px] leading-normal">
		<header class="w-full h-[75px]">
			<nav class="size-full px-7 max-w-[500px] mx-auto flex flex-col-reverse gap-3.5 items-center sm:flex-row sm:p-0">
				<ul class="w-fit h-full flex gap-4 items-center min-[425px]:gap-8">
					{
						scrollNavCircles.map(({ name, href }) => (
							<li>
								<a href={`#${href}`} class="transition-color duration-300 p-0.5 rounded hover:text-primary-light focus-visible:text-primary-light">
									{name}
								</a>
							</li>
						))
					}
				</ul>
		
				<div class="hidden w-px h-1/3 bg-white opacity-50 rounded-lg sm:block"></div>
		
				<LenguagePicker />
			</nav>
		</header>

		<section id={Sections.HOME} class="w-full h-auto max-w-[800px] mx-auto">
			<HomeSection />
		</section>

		<section id={Sections.PROJECTS} class="w-full h-auto max-w-[800px] mx-auto my-[200px]">
			<ProjectsSection />
		</section>

		<section id={Sections.ABOUT} class="w-full h-auto max-w-[800px] mx-auto my-[200px]">
			<AboutSection />
		</section>

		<section id={Sections.CONTACT} class="w-full h-auto max-w-[800px] mx-auto my-[200px]">
			<ContactSection />
		</section>
	</main>
</Layout>

<script>
	import { Sections } from "@models/sections";

	type SectionRefs = {
		[key in Sections]: HTMLElement;
	}

	// ScrollNav
	const scrollNavRef = document.getElementById("scroll-nav")!;

	const scrollNavCircleHomeRefs = document.querySelectorAll(`a[href="#home"]`)!;
	const scrollNavCircleProjectsRefs = document.querySelectorAll(`a[href="#projects"]`)!;
	const scrollNavCircleAboutRefs = document.querySelectorAll(`a[href="#about"]`)!;
	const scrollNavCircleContactRefs= document.querySelectorAll(`a[href="#contact"]`)!;

	let currentSelectedSection: Sections | null = null;

	for (const scrollNavCircleHomeRef of scrollNavCircleHomeRefs) {
		scrollNavCircleHomeRef.addEventListener('click', () => {
			currentSelectedSection = Sections.HOME;
		})
	};

	for (const scrollNavCircleProjectsRef of scrollNavCircleProjectsRefs) {
		scrollNavCircleProjectsRef.addEventListener('click', () => {
			currentSelectedSection = Sections.PROJECTS;
		})
	};

	for (const scrollNavCircleAboutRef of scrollNavCircleAboutRefs) {
		scrollNavCircleAboutRef.addEventListener('click', () => {
			currentSelectedSection = Sections.ABOUT;
		})
	};

	for (const scrollNavCircleContactRef of scrollNavCircleContactRefs) {
		scrollNavCircleContactRef.addEventListener('click', () => {
			currentSelectedSection = Sections.CONTACT;
		})
	};

	// Sections
	const sections: SectionRefs = {
		home: document.getElementById(Sections.HOME)!,
		projects: document.getElementById(Sections.PROJECTS)!,
		about: document.getElementById(Sections.ABOUT)!,
		contact: document.getElementById(Sections.CONTACT)!
	}

	const handleObserver = (entries: IntersectionObserverEntry[]) => {
		entries.forEach((entry: IntersectionObserverEntry) => {
			let sectionView = entry.target.id;

			// Handle visibility of scrollNav
			if (window.scrollY < 350) {
				scrollNavRef.classList.remove("visible","opacity-100","h-auto","right-2",);
				scrollNavRef.classList.add("invisible","opacity-0","h-0","-right-5",);
			} else {
				scrollNavRef.classList.add("visible","opacity-100","h-auto","right-2",);
				scrollNavRef.classList.remove("invisible","opacity-0","h-0","-right-5",);
			}

			// Handle scrollNav circle active
			const scrollNavCircle = document.querySelector(`a[href="#${sectionView}"]`)!;

			if (entry.isIntersecting) {
				// If the user doesn't manually select a section with scrollNav, update the hash automatically through scroll.
				if (!currentSelectedSection) window.location.hash = sectionView;

				// If the user manually selects a section, once the scroll redirection is finished, reactivate the automatic hash management.
				if (currentSelectedSection && sectionView === currentSelectedSection) currentSelectedSection = null;

				scrollNavCircle.classList.remove("text-primary-light");
				scrollNavCircle.classList.add("text-[rgb(105,160,214)]");
			} else {
				scrollNavCircle.classList.remove("text-[rgb(105,160,214)]");
				scrollNavCircle.classList.add("text-primary-light");
			}
		});
	};
	const sectionObservatorDefault = new IntersectionObserver(handleObserver, { threshold: 0.75 });

	for (const section in sections) {
	  	if (section !== Sections.PROJECTS) {
	    	sectionObservatorDefault.observe(sections[section as keyof SectionRefs]);
	  	}
	}

	// Observe "projects" section with threshold 0.15
	const sectionObservatorProjects = new IntersectionObserver(handleObserver, { threshold: 0.15 });
	sectionObservatorProjects.observe(sections.projects);
</script>